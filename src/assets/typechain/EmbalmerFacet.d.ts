/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EmbalmerFacetInterface extends ethers.utils.Interface {
  functions: {
    "burySarcophagus(bytes32)": FunctionFragment;
    "cancelSarcophagus(bytes32)": FunctionFragment;
    "finalizeSarcophagus(bytes32,tuple[],(uint8,bytes32,bytes32),string)": FunctionFragment;
    "initializeSarcophagus(string,tuple[],address,address,uint256,uint256,bool,uint8,bytes32)": FunctionFragment;
    "rewrapSarcophagus(bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burySarcophagus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSarcophagus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeSarcophagus",
    values: [
      BytesLike,
      { account: string; v: BigNumberish; r: BytesLike; s: BytesLike }[],
      { v: BigNumberish; r: BytesLike; s: BytesLike },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeSarcophagus",
    values: [
      string,
      {
        archAddress: string;
        storageFee: BigNumberish;
        diggingFee: BigNumberish;
        bounty: BigNumberish;
        hashedShard: BytesLike;
      }[],
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rewrapSarcophagus",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "burySarcophagus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSarcophagus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeSarcophagus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeSarcophagus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewrapSarcophagus",
    data: BytesLike
  ): Result;

  events: {
    "BurySarcophagus(bytes32)": EventFragment;
    "CancelSarcophagus(bytes32)": EventFragment;
    "FinalizeSarcophagus(bytes32,string)": EventFragment;
    "InitializeSarcophagus(bytes32,address,uint256)": EventFragment;
    "RewrapSarcophagus(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BurySarcophagus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSarcophagus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalizeSarcophagus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitializeSarcophagus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewrapSarcophagus"): EventFragment;
}

export type BurySarcophagusEvent = TypedEvent<[string] & { sarcoId: string }>;

export type CancelSarcophagusEvent = TypedEvent<[string] & { sarcoId: string }>;

export type FinalizeSarcophagusEvent = TypedEvent<
  [string, string] & { sarcoId: string; arweaveTxId: string }
>;

export type InitializeSarcophagusEvent = TypedEvent<
  [string, string, BigNumber] & {
    sarcoId: string;
    embalmer: string;
    totalFees: BigNumber;
  }
>;

export type RewrapSarcophagusEvent = TypedEvent<
  [string, BigNumber] & { sarcoId: string; resurrectionTime: BigNumber }
>;

export class EmbalmerFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EmbalmerFacetInterface;

  functions: {
    burySarcophagus(
      sarcoId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelSarcophagus(
      sarcoId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeSarcophagus(
      sarcoId: BytesLike,
      archaeologistSignatures: {
        account: string;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      arweaveArchaeologistSignature: {
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      arweaveTxId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeSarcophagus(
      name: string,
      archaeologists: {
        archAddress: string;
        storageFee: BigNumberish;
        diggingFee: BigNumberish;
        bounty: BigNumberish;
        hashedShard: BytesLike;
      }[],
      arweaveArchaeologist: string,
      recipient: string,
      resurrectionTime: BigNumberish,
      maxResurrectionInterval: BigNumberish,
      canBeTransferred: boolean,
      minShards: BigNumberish,
      sarcoId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewrapSarcophagus(
      sarcoId: BytesLike,
      resurrectionTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burySarcophagus(
    sarcoId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelSarcophagus(
    sarcoId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeSarcophagus(
    sarcoId: BytesLike,
    archaeologistSignatures: {
      account: string;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    }[],
    arweaveArchaeologistSignature: {
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    arweaveTxId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeSarcophagus(
    name: string,
    archaeologists: {
      archAddress: string;
      storageFee: BigNumberish;
      diggingFee: BigNumberish;
      bounty: BigNumberish;
      hashedShard: BytesLike;
    }[],
    arweaveArchaeologist: string,
    recipient: string,
    resurrectionTime: BigNumberish,
    maxResurrectionInterval: BigNumberish,
    canBeTransferred: boolean,
    minShards: BigNumberish,
    sarcoId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewrapSarcophagus(
    sarcoId: BytesLike,
    resurrectionTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burySarcophagus(
      sarcoId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSarcophagus(
      sarcoId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeSarcophagus(
      sarcoId: BytesLike,
      archaeologistSignatures: {
        account: string;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      arweaveArchaeologistSignature: {
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      arweaveTxId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeSarcophagus(
      name: string,
      archaeologists: {
        archAddress: string;
        storageFee: BigNumberish;
        diggingFee: BigNumberish;
        bounty: BigNumberish;
        hashedShard: BytesLike;
      }[],
      arweaveArchaeologist: string,
      recipient: string,
      resurrectionTime: BigNumberish,
      maxResurrectionInterval: BigNumberish,
      canBeTransferred: boolean,
      minShards: BigNumberish,
      sarcoId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewrapSarcophagus(
      sarcoId: BytesLike,
      resurrectionTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BurySarcophagus(bytes32)"(
      sarcoId?: BytesLike | null
    ): TypedEventFilter<[string], { sarcoId: string }>;

    BurySarcophagus(
      sarcoId?: BytesLike | null
    ): TypedEventFilter<[string], { sarcoId: string }>;

    "CancelSarcophagus(bytes32)"(
      sarcoId?: BytesLike | null
    ): TypedEventFilter<[string], { sarcoId: string }>;

    CancelSarcophagus(
      sarcoId?: BytesLike | null
    ): TypedEventFilter<[string], { sarcoId: string }>;

    "FinalizeSarcophagus(bytes32,string)"(
      sarcoId?: BytesLike | null,
      arweaveTxId?: null
    ): TypedEventFilter<
      [string, string],
      { sarcoId: string; arweaveTxId: string }
    >;

    FinalizeSarcophagus(
      sarcoId?: BytesLike | null,
      arweaveTxId?: null
    ): TypedEventFilter<
      [string, string],
      { sarcoId: string; arweaveTxId: string }
    >;

    "InitializeSarcophagus(bytes32,address,uint256)"(
      sarcoId?: BytesLike | null,
      embalmer?: null,
      totalFees?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sarcoId: string; embalmer: string; totalFees: BigNumber }
    >;

    InitializeSarcophagus(
      sarcoId?: BytesLike | null,
      embalmer?: null,
      totalFees?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sarcoId: string; embalmer: string; totalFees: BigNumber }
    >;

    "RewrapSarcophagus(bytes32,uint256)"(
      sarcoId?: BytesLike | null,
      resurrectionTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sarcoId: string; resurrectionTime: BigNumber }
    >;

    RewrapSarcophagus(
      sarcoId?: BytesLike | null,
      resurrectionTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sarcoId: string; resurrectionTime: BigNumber }
    >;
  };

  estimateGas: {
    burySarcophagus(
      sarcoId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelSarcophagus(
      sarcoId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeSarcophagus(
      sarcoId: BytesLike,
      archaeologistSignatures: {
        account: string;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      arweaveArchaeologistSignature: {
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      arweaveTxId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeSarcophagus(
      name: string,
      archaeologists: {
        archAddress: string;
        storageFee: BigNumberish;
        diggingFee: BigNumberish;
        bounty: BigNumberish;
        hashedShard: BytesLike;
      }[],
      arweaveArchaeologist: string,
      recipient: string,
      resurrectionTime: BigNumberish,
      maxResurrectionInterval: BigNumberish,
      canBeTransferred: boolean,
      minShards: BigNumberish,
      sarcoId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewrapSarcophagus(
      sarcoId: BytesLike,
      resurrectionTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burySarcophagus(
      sarcoId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelSarcophagus(
      sarcoId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeSarcophagus(
      sarcoId: BytesLike,
      archaeologistSignatures: {
        account: string;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      arweaveArchaeologistSignature: {
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      arweaveTxId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeSarcophagus(
      name: string,
      archaeologists: {
        archAddress: string;
        storageFee: BigNumberish;
        diggingFee: BigNumberish;
        bounty: BigNumberish;
        hashedShard: BytesLike;
      }[],
      arweaveArchaeologist: string,
      recipient: string,
      resurrectionTime: BigNumberish,
      maxResurrectionInterval: BigNumberish,
      canBeTransferred: boolean,
      minShards: BigNumberish,
      sarcoId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewrapSarcophagus(
      sarcoId: BytesLike,
      resurrectionTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
