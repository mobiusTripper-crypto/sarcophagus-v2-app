/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ThirdPartyFacetInterface extends ethers.utils.Interface {
  functions: {
    "accuse(bytes32,bytes32[],address)": FunctionFragment;
    "clean(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accuse",
    values: [BytesLike, BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "clean",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "accuse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clean", data: BytesLike): Result;

  events: {
    "AccuseArchaeologist(bytes32,address,uint256,uint256)": EventFragment;
    "CleanUpSarcophagus(bytes32,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccuseArchaeologist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CleanUpSarcophagus"): EventFragment;
}

export type AccuseArchaeologistEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    sarcoId: string;
    accuser: string;
    accuserBondReward: BigNumber;
    embalmerBondReward: BigNumber;
  }
>;

export type CleanUpSarcophagusEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    sarcoId: string;
    cleaner: string;
    cleanerBondReward: BigNumber;
    embalmerBondReward: BigNumber;
  }
>;

export class ThirdPartyFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ThirdPartyFacetInterface;

  functions: {
    accuse(
      sarcoId: BytesLike,
      unencryptedShardHashes: BytesLike[],
      paymentAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clean(
      sarcoId: BytesLike,
      paymentAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accuse(
    sarcoId: BytesLike,
    unencryptedShardHashes: BytesLike[],
    paymentAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clean(
    sarcoId: BytesLike,
    paymentAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accuse(
      sarcoId: BytesLike,
      unencryptedShardHashes: BytesLike[],
      paymentAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    clean(
      sarcoId: BytesLike,
      paymentAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccuseArchaeologist(bytes32,address,uint256,uint256)"(
      sarcoId?: BytesLike | null,
      accuser?: string | null,
      accuserBondReward?: null,
      embalmerBondReward?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        sarcoId: string;
        accuser: string;
        accuserBondReward: BigNumber;
        embalmerBondReward: BigNumber;
      }
    >;

    AccuseArchaeologist(
      sarcoId?: BytesLike | null,
      accuser?: string | null,
      accuserBondReward?: null,
      embalmerBondReward?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        sarcoId: string;
        accuser: string;
        accuserBondReward: BigNumber;
        embalmerBondReward: BigNumber;
      }
    >;

    "CleanUpSarcophagus(bytes32,address,uint256,uint256)"(
      sarcoId?: BytesLike | null,
      cleaner?: string | null,
      cleanerBondReward?: null,
      embalmerBondReward?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        sarcoId: string;
        cleaner: string;
        cleanerBondReward: BigNumber;
        embalmerBondReward: BigNumber;
      }
    >;

    CleanUpSarcophagus(
      sarcoId?: BytesLike | null,
      cleaner?: string | null,
      cleanerBondReward?: null,
      embalmerBondReward?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        sarcoId: string;
        cleaner: string;
        cleanerBondReward: BigNumber;
        embalmerBondReward: BigNumber;
      }
    >;
  };

  estimateGas: {
    accuse(
      sarcoId: BytesLike,
      unencryptedShardHashes: BytesLike[],
      paymentAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clean(
      sarcoId: BytesLike,
      paymentAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accuse(
      sarcoId: BytesLike,
      unencryptedShardHashes: BytesLike[],
      paymentAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clean(
      sarcoId: BytesLike,
      paymentAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
