/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LibEventsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "BurySarcophagus(bytes32)": EventFragment;
    "CancelSarcophagus(bytes32)": EventFragment;
    "CleanUpSarcophagus(bytes32,address,uint256,uint256)": EventFragment;
    "Creation(address)": EventFragment;
    "DepositFreeBond(address,uint256)": EventFragment;
    "FinalizeSarcophagus(bytes32,string)": EventFragment;
    "FinalizeTransfer(bytes32,string,address,address)": EventFragment;
    "InitializeSarcophagus(bytes32,string,bool,uint256,address,address,address,address[])": EventFragment;
    "RegisterArchaeologist(address,bytes,string,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "RewrapSarcophagus(bytes32,uint256,uint256)": EventFragment;
    "UnwrapSarcophagus(bytes32,bytes)": EventFragment;
    "UpdateArchaeologist(address,string,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "UpdateArchaeologistPublicKey(address,bytes)": EventFragment;
    "WithdrawFreeBond(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BurySarcophagus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSarcophagus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CleanUpSarcophagus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Creation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositFreeBond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalizeSarcophagus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalizeTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitializeSarcophagus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterArchaeologist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewrapSarcophagus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnwrapSarcophagus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateArchaeologist"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateArchaeologistPublicKey"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFreeBond"): EventFragment;
}

export type BurySarcophagusEvent = TypedEvent<
  [string] & { identifier: string }
>;

export type CancelSarcophagusEvent = TypedEvent<
  [string] & { identifier: string }
>;

export type CleanUpSarcophagusEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    identifier: string;
    cleaner: string;
    cleanerBondReward: BigNumber;
    embalmerBondReward: BigNumber;
  }
>;

export type CreationEvent = TypedEvent<
  [string] & { sarcophagusContract: string }
>;

export type DepositFreeBondEvent = TypedEvent<
  [string, BigNumber] & { archaeologist: string; depositedBond: BigNumber }
>;

export type FinalizeSarcophagusEvent = TypedEvent<
  [string, string] & { identifier: string; arweaveTxId: string }
>;

export type FinalizeTransferEvent = TypedEvent<
  [string, string, string, string] & {
    identifier: string;
    arweaveTxId: string;
    oldArchaeologist: string;
    newArchaeologist: string;
  }
>;

export type InitializeSarcophagusEvent = TypedEvent<
  [string, string, boolean, BigNumber, string, string, string, string[]] & {
    identifier: string;
    name: string;
    canBeTransferred: boolean;
    resurrectionTime: BigNumber;
    embalmer: string;
    recipientAddress: string;
    arweaveArchaeologist: string;
    archaeologists: string[];
  }
>;

export type RegisterArchaeologistEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    archaeologist: string;
    currentPublicKey: string;
    endpoint: string;
    paymentAddress: string;
    feePerByte: BigNumber;
    minimumBounty: BigNumber;
    minimumDiggingFee: BigNumber;
    maximumResurrectionTime: BigNumber;
    bond: BigNumber;
  }
>;

export type RewrapSarcophagusEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    identifier: string;
    resurrectionTime: BigNumber;
    resurrectionWindow: BigNumber;
  }
>;

export type UnwrapSarcophagusEvent = TypedEvent<
  [string, string] & { identifier: string; unencryptedShard: string }
>;

export type UpdateArchaeologistEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    archaeologist: string;
    endpoint: string;
    paymentAddress: string;
    feePerByte: BigNumber;
    minimumBounty: BigNumber;
    minimumDiggingFee: BigNumber;
    maximumResurrectionTime: BigNumber;
    addedBond: BigNumber;
  }
>;

export type UpdateArchaeologistPublicKeyEvent = TypedEvent<
  [string, string] & { archaeologist: string; currentPublicKey: string }
>;

export type WithdrawFreeBondEvent = TypedEvent<
  [string, BigNumber] & { archaeologist: string; withdrawnBond: BigNumber }
>;

export class LibEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LibEventsInterface;

  functions: {};

  callStatic: {};

  filters: {
    "BurySarcophagus(bytes32)"(
      identifier?: BytesLike | null
    ): TypedEventFilter<[string], { identifier: string }>;

    BurySarcophagus(
      identifier?: BytesLike | null
    ): TypedEventFilter<[string], { identifier: string }>;

    "CancelSarcophagus(bytes32)"(
      identifier?: BytesLike | null
    ): TypedEventFilter<[string], { identifier: string }>;

    CancelSarcophagus(
      identifier?: BytesLike | null
    ): TypedEventFilter<[string], { identifier: string }>;

    "CleanUpSarcophagus(bytes32,address,uint256,uint256)"(
      identifier?: BytesLike | null,
      cleaner?: string | null,
      cleanerBondReward?: null,
      embalmerBondReward?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        identifier: string;
        cleaner: string;
        cleanerBondReward: BigNumber;
        embalmerBondReward: BigNumber;
      }
    >;

    CleanUpSarcophagus(
      identifier?: BytesLike | null,
      cleaner?: string | null,
      cleanerBondReward?: null,
      embalmerBondReward?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        identifier: string;
        cleaner: string;
        cleanerBondReward: BigNumber;
        embalmerBondReward: BigNumber;
      }
    >;

    "Creation(address)"(
      sarcophagusContract?: null
    ): TypedEventFilter<[string], { sarcophagusContract: string }>;

    Creation(
      sarcophagusContract?: null
    ): TypedEventFilter<[string], { sarcophagusContract: string }>;

    "DepositFreeBond(address,uint256)"(
      archaeologist?: string | null,
      depositedBond?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { archaeologist: string; depositedBond: BigNumber }
    >;

    DepositFreeBond(
      archaeologist?: string | null,
      depositedBond?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { archaeologist: string; depositedBond: BigNumber }
    >;

    "FinalizeSarcophagus(bytes32,string)"(
      identifier?: BytesLike | null,
      arweaveTxId?: null
    ): TypedEventFilter<
      [string, string],
      { identifier: string; arweaveTxId: string }
    >;

    FinalizeSarcophagus(
      identifier?: BytesLike | null,
      arweaveTxId?: null
    ): TypedEventFilter<
      [string, string],
      { identifier: string; arweaveTxId: string }
    >;

    "FinalizeTransfer(bytes32,string,address,address)"(
      identifier?: null,
      arweaveTxId?: null,
      oldArchaeologist?: null,
      newArchaeologist?: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        identifier: string;
        arweaveTxId: string;
        oldArchaeologist: string;
        newArchaeologist: string;
      }
    >;

    FinalizeTransfer(
      identifier?: null,
      arweaveTxId?: null,
      oldArchaeologist?: null,
      newArchaeologist?: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        identifier: string;
        arweaveTxId: string;
        oldArchaeologist: string;
        newArchaeologist: string;
      }
    >;

    "InitializeSarcophagus(bytes32,string,bool,uint256,address,address,address,address[])"(
      identifier?: BytesLike | null,
      name?: null,
      canBeTransferred?: null,
      resurrectionTime?: null,
      embalmer?: null,
      recipientAddress?: null,
      arweaveArchaeologist?: null,
      archaeologists?: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber, string, string, string, string[]],
      {
        identifier: string;
        name: string;
        canBeTransferred: boolean;
        resurrectionTime: BigNumber;
        embalmer: string;
        recipientAddress: string;
        arweaveArchaeologist: string;
        archaeologists: string[];
      }
    >;

    InitializeSarcophagus(
      identifier?: BytesLike | null,
      name?: null,
      canBeTransferred?: null,
      resurrectionTime?: null,
      embalmer?: null,
      recipientAddress?: null,
      arweaveArchaeologist?: null,
      archaeologists?: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber, string, string, string, string[]],
      {
        identifier: string;
        name: string;
        canBeTransferred: boolean;
        resurrectionTime: BigNumber;
        embalmer: string;
        recipientAddress: string;
        arweaveArchaeologist: string;
        archaeologists: string[];
      }
    >;

    "RegisterArchaeologist(address,bytes,string,address,uint256,uint256,uint256,uint256,uint256)"(
      archaeologist?: string | null,
      currentPublicKey?: null,
      endpoint?: null,
      paymentAddress?: null,
      feePerByte?: null,
      minimumBounty?: null,
      minimumDiggingFee?: null,
      maximumResurrectionTime?: null,
      bond?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        archaeologist: string;
        currentPublicKey: string;
        endpoint: string;
        paymentAddress: string;
        feePerByte: BigNumber;
        minimumBounty: BigNumber;
        minimumDiggingFee: BigNumber;
        maximumResurrectionTime: BigNumber;
        bond: BigNumber;
      }
    >;

    RegisterArchaeologist(
      archaeologist?: string | null,
      currentPublicKey?: null,
      endpoint?: null,
      paymentAddress?: null,
      feePerByte?: null,
      minimumBounty?: null,
      minimumDiggingFee?: null,
      maximumResurrectionTime?: null,
      bond?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        archaeologist: string;
        currentPublicKey: string;
        endpoint: string;
        paymentAddress: string;
        feePerByte: BigNumber;
        minimumBounty: BigNumber;
        minimumDiggingFee: BigNumber;
        maximumResurrectionTime: BigNumber;
        bond: BigNumber;
      }
    >;

    "RewrapSarcophagus(bytes32,uint256,uint256)"(
      identifier?: BytesLike | null,
      resurrectionTime?: null,
      resurrectionWindow?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        identifier: string;
        resurrectionTime: BigNumber;
        resurrectionWindow: BigNumber;
      }
    >;

    RewrapSarcophagus(
      identifier?: BytesLike | null,
      resurrectionTime?: null,
      resurrectionWindow?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        identifier: string;
        resurrectionTime: BigNumber;
        resurrectionWindow: BigNumber;
      }
    >;

    "UnwrapSarcophagus(bytes32,bytes)"(
      identifier?: BytesLike | null,
      unencryptedShard?: null
    ): TypedEventFilter<
      [string, string],
      { identifier: string; unencryptedShard: string }
    >;

    UnwrapSarcophagus(
      identifier?: BytesLike | null,
      unencryptedShard?: null
    ): TypedEventFilter<
      [string, string],
      { identifier: string; unencryptedShard: string }
    >;

    "UpdateArchaeologist(address,string,address,uint256,uint256,uint256,uint256,uint256)"(
      archaeologist?: string | null,
      endpoint?: null,
      paymentAddress?: null,
      feePerByte?: null,
      minimumBounty?: null,
      minimumDiggingFee?: null,
      maximumResurrectionTime?: null,
      addedBond?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        archaeologist: string;
        endpoint: string;
        paymentAddress: string;
        feePerByte: BigNumber;
        minimumBounty: BigNumber;
        minimumDiggingFee: BigNumber;
        maximumResurrectionTime: BigNumber;
        addedBond: BigNumber;
      }
    >;

    UpdateArchaeologist(
      archaeologist?: string | null,
      endpoint?: null,
      paymentAddress?: null,
      feePerByte?: null,
      minimumBounty?: null,
      minimumDiggingFee?: null,
      maximumResurrectionTime?: null,
      addedBond?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        archaeologist: string;
        endpoint: string;
        paymentAddress: string;
        feePerByte: BigNumber;
        minimumBounty: BigNumber;
        minimumDiggingFee: BigNumber;
        maximumResurrectionTime: BigNumber;
        addedBond: BigNumber;
      }
    >;

    "UpdateArchaeologistPublicKey(address,bytes)"(
      archaeologist?: string | null,
      currentPublicKey?: null
    ): TypedEventFilter<
      [string, string],
      { archaeologist: string; currentPublicKey: string }
    >;

    UpdateArchaeologistPublicKey(
      archaeologist?: string | null,
      currentPublicKey?: null
    ): TypedEventFilter<
      [string, string],
      { archaeologist: string; currentPublicKey: string }
    >;

    "WithdrawFreeBond(address,uint256)"(
      archaeologist?: string | null,
      withdrawnBond?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { archaeologist: string; withdrawnBond: BigNumber }
    >;

    WithdrawFreeBond(
      archaeologist?: string | null,
      withdrawnBond?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { archaeologist: string; withdrawnBond: BigNumber }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
