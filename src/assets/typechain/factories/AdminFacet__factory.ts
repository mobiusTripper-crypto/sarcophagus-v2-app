/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AdminFacet, AdminFacetInterface } from "../AdminFacet";

const _abi = [
  {
    inputs: [],
    name: "withdrawProtocolFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610216806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638795cccb14610030575b600080fd5b61003861003a565b005b600080600201549050600080600201819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016100ac92919061014d565b6020604051808303816000875af11580156100cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ef91906101b3565b5050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061011e826100f3565b9050919050565b61012e81610113565b82525050565b6000819050919050565b61014781610134565b82525050565b60006040820190506101626000830185610125565b61016f602083018461013e565b9392505050565b600080fd5b60008115159050919050565b6101908161017b565b811461019b57600080fd5b50565b6000815190506101ad81610187565b92915050565b6000602082840312156101c9576101c8610176565b5b60006101d78482850161019e565b9150509291505056fea26469706673582212204ef32f398855746a92274040769556c068d8df98de08af8be05335e439d8483d64736f6c634300080d0033";

export class AdminFacet__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AdminFacet> {
    return super.deploy(overrides || {}) as Promise<AdminFacet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AdminFacet {
    return super.attach(address) as AdminFacet;
  }
  connect(signer: Signer): AdminFacet__factory {
    return super.connect(signer) as AdminFacet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AdminFacetInterface {
    return new utils.Interface(_abi) as AdminFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AdminFacet {
    return new Contract(address, _abi, signerOrProvider) as AdminFacet;
  }
}
